
- allow = policy(record)

- if record.stateable?
  - states = record.avaliable_states.map { |state| [human_enum_name(record, :state, state), state.to_s] }
  - if record.published? && !record.unpublishable?
    = f.input :state do
      = label_tag 'info circle', human_enum_name(record, :state)
  - elsif record.draftable?
    = draftable_field f, :state, type: :collection, input: { collection: states } do |value|
      - f.input_field :state, collection: states, selected: value, disabled: !allow.update_structure?
  - else
    = f.input :state, collection: states, disabled: !allow.update_structure?
- elsif record.publishable? && allow.review?
  - if record.draftable?
    = draftable_publish_field f
  - elsif allow.publish?
    = f.input :published do
      = publish_input f, :published, enabled: allow.publish?

- if record.viewable?
  - if record.draftable?
    = draftable_field f, :name
  - else
    = f.input :name

  - if record.fixed_slug?
    = f.input :slug do
      = record_detail 'linkify', CGI.unescape(wm_path_for(@record)), url: wm_url_for(@record)
      = f.hint translate('admin.hints.fixed_slug')
  - elsif record.draftable?
    / TODO: Try and improve this janky way of getting the url. It's because articles and static pages don't have any index route
    ruby:
      if record.new_record?
        url = record.is_a?(PromoPage) ? '/*' : "/#{translate(record.model_name.i18n_key.to_s.pluralize, scope: 'routes')}/*"
      else
        url = url_for(record)
      end
      
    = draftable_slug_field f, url
  - else
    - url = record.new_record? ? "/#{polymorphic_path(record.class)}/*" : polymorphic_path(record)
    - url = url.gsub(%r{\/[^\/]*\/?$}, '/') # Strip the last element from the url
    = f.input :slug do
      = content_tag :div, class: 'ui labeled slug input' do
        = tag.div CGI.unescape(url), class: 'ui basic label'
        = f.input_field :slug
      - if record.is_a?(Meditation)
        .hint = translate('admin.hints.self_realization_slug', slug: translate('routes.self_realization', locale: context_locale))

  - unless record.fixed_slug?
    .field
      .ui.accordion
        .title
          i.dropdown.icon
          = translate 'admin.misc.previous_slugs'
        .content
          .ui.list
            ul
              - slugs = record.translatable? ? record.slugs.where(locale: Globalize.locale) : record.slugs
              - slugs.pluck(:slug).each do |slug|
                li.item
                  = slug

= render "admin/fields/#{record.model_name.param_key}", f: f, record: record

- if record.viewable? && allow.update_structure?
  = render 'admin/partials/repeatable_fields', f: f, attribute: :metatags, horizontal: true do |ff, item|
    = ff.text_field :name, id: nil, value: item[0], placeholder: translate('admin.metadata.key'), name: "#{ff.object_name}[keys][]", data: { key: 'key' }
    = ff.text_field :value, id: nil, value: item[1], placeholder: translate('admin.metadata.value'), name: "#{ff.object_name}[values][]", data: { key: 'value' }

  - unless record.new_record?
    .field
      .ui.accordion#metatags
        .title
          i.dropdown.icon
          = translate 'admin.metadata.default_metadata'
        .content
          .ui.list
            - default_metatags(record).each do |key, value|
              .item
                strong = key
                - if value.is_a? Array
                  span = value
                - else
                  span "#{value}"

      .ui.accordion#jsonld
        .title
          i.dropdown.icon
          = translate 'admin.metadata.generated_jsonld'
        .content
          code = JSON.pretty_generate(structured_data(record))

- if record.respond_to?(:published) && !allow.review?
  - if record.draftable?
    = draftable_publish_field f
  - elsif allow.publish?
    = f.input :published do
      = publish_input f, :published, enabled: allow.publish?
